#!/usr/bin/env python3

"""
generate-email.py

A script to email the PDF report generated by 'generate-pdf.py'.

Prerequisites:
- Python 3.x
- A reachable SMTP server (could be an internal company server or e.g. Gmail)
- Valid credentials for the SMTP server (unless using a no-auth or local mail relay setup)

Usage:
    python3 generate-email.py

Customization:
    - Fill in SMTP_HOST, SMTP_PORT, SENDER_EMAIL, SENDER_PASSWORD, RECIPIENT_EMAILS
    - Optionally modify subject or body as desired
"""

import argparse
import os
import smtplib
import ssl
from email.message import EmailMessage


def main():
    # ------------------------------------------------------------------------------------
    # 1. Configuration: SMTP + email addresses
    # ------------------------------------------------------------------------------------
    # You can also load these from environment variables or a config file for extra safety.
    SMTP_HOST = "smtp.example.com"
    SMTP_PORT = 587
    SENDER_EMAIL = "hardware-tests@example.com"
    SENDER_PASSWORD = "YOUR_PASSWORD_HERE"

    # The recipients can be a list of one or more email addresses
    RECIPIENT_EMAILS = ["recipient1@example.com", "recipient2@example.com"]

    # ------------------------------------------------------------------------------------
    # 2. Command-line arguments (optional)
    # ------------------------------------------------------------------------------------
    parser = argparse.ArgumentParser(
        description="Send the hardware test report PDF via email."
    )
    parser.add_argument(
        "--subject",
        default="Hardware Test Report",
        help="Subject of the email (default: 'Hardware Test Report').",
    )
    parser.add_argument(
        "--body",
        default="Hello,\n\nPlease find attached the hardware test report.\n\nBest Regards,\nYour Test Automation",
        help="Body text for the email.",
    )
    parser.add_argument(
        "--attachment",
        default="{{ cookiecutter.project_slug }}.pdf",
        help="Path to the PDF attachment (default: '{{ cookiecutter.project_slug }}.pdf').",
    )
    args = parser.parse_args()

    # By default, we assume the PDF is in the 'report' folder
    pdf_path = os.path.join("report", args.attachment)

    # ------------------------------------------------------------------------------------
    # 3. Create the email message
    # ------------------------------------------------------------------------------------
    msg = EmailMessage()
    msg["From"] = SENDER_EMAIL
    msg["To"] = ", ".join(RECIPIENT_EMAILS)
    msg["Subject"] = args.subject

    # Set email body (plain text)
    msg.set_content(args.body)

    # ------------------------------------------------------------------------------------
    # 4. Attach the PDF report (if it exists)
    # ------------------------------------------------------------------------------------
    if os.path.isfile(pdf_path):
        with open(pdf_path, "rb") as f:
            file_data = f.read()
        file_name = os.path.basename(pdf_path)

        # Maintype and subtype for PDF
        msg.add_attachment(
            file_data, maintype="application", subtype="pdf", filename=file_name
        )
        print(f"Attached PDF: {file_name}")
    else:
        print(f"Warning: {pdf_path} not found. Proceeding without attachment.")

    # ------------------------------------------------------------------------------------
    # 5. Send the email (SSL/TLS recommended)
    # ------------------------------------------------------------------------------------
    try:
        # Create a secure SSL context
        context = ssl.create_default_context()

        # Using STARTTLS on port 587 (typical for many SMTP servers)
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.ehlo()
            server.starttls(context=context)
            server.ehlo()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)

        print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email. Error: {str(e)}")


if __name__ == "__main__":
    main()
